import messaging from '@react-native-firebase/messaging';
import { PermissionsAndroid, Platform, Alert } from 'react-native';
import * as Device from 'expo-device';
import * as Application from 'expo-application';

// Ki·ªÉm tra Firebase Messaging c√≥ s·∫µn kh√¥ng
function isFirebaseMessagingAvailable() {
  try {
    return messaging !== null && messaging !== undefined;
  } catch (error) {
    console.log('‚ùå Firebase Messaging not available:', error);
    return false;
  }
}

// Xin quy·ªÅn th√¥ng b√°o
export async function requestNotificationPermission() {
  try {
    if (Platform.OS === 'android' && Platform.Version >= 33) {
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.POST_NOTIFICATIONS
      );
      console.log('üîê Android notification permission:', granted);
      return granted === PermissionsAndroid.RESULTS.GRANTED;
    }
    return true;
  } catch (error) {
    console.error('‚ùå Error requesting notification permission:', error);
    return false;
  }
}

// L·∫•y FCM Token
export async function getFcmToken() {
  try {
    if (!isFirebaseMessagingAvailable()) {
      console.log('‚ùå Firebase Messaging not available');
      return null;
    }
      
    console.log('üöÄ B·∫Øt ƒë·∫ßu l·∫•y FCM Token...');
    
    // Xin quy·ªÅn tr∆∞·ªõc
    const hasPermission = await requestNotificationPermission();
    if (!hasPermission) {
      console.log('‚ùå Kh√¥ng ƒë∆∞·ª£c c·∫•p quy·ªÅn th√¥ng b√°o!');
      Alert.alert('Th√¥ng b√°o', 'C·∫ßn quy·ªÅn th√¥ng b√°o ƒë·ªÉ nh·∫≠n push notifications');
      return null;
    }
    
    // L·∫•y FCM Token th·ª±c s·ª±
    const token = await messaging().getToken();
    console.log('üéØ === FCM TOKEN ===');
    console.log('üì± Token:', token);
    console.log('üéØ =================');
    
    return token;
  } catch (error) {
    console.error('üí• Failed to get FCM Token:', error);
    return null;
  }
}

// L·∫Øng nghe tin nh·∫Øn khi app ƒëang m·ªü (foreground)
export function listenForegroundMessage() {
  try {
    if (!isFirebaseMessagingAvailable()) {
      console.log('‚ùå Firebase Messaging not available for foreground messages');
      return () => {};
    }

    console.log('üì® Setting up foreground message listener...');
    const unsubscribe = messaging().onMessage(async remoteMessage => {
      console.log('üì® Foreground message received:', remoteMessage);
      // X·ª≠ l√Ω tin nh·∫Øn ·ªü ƒë√¢y
    });

    return unsubscribe;
  } catch (error) {
    console.log('‚ùå Error setting up foreground message listener:', error);
    return () => {};
  }
}

// ƒêƒÉng k√Ω background handler (c·∫ßn g·ªçi trong index.js)
export function setupBackgroundHandler() {
  try {
    if (!isFirebaseMessagingAvailable()) {
      console.log('‚ùå Firebase Messaging not available for background handler');
      return;
    }

    // T·∫°m th·ªùi kh√¥ng setup v√¨ Firebase b·ªã disable
    console.log('üì® Background handler: DISABLED');
  } catch (error) {
    console.log('‚ùå Error setting up background handler:', error);
  }
}

// L·∫•y t·∫•t c·∫£ device tokens (FCM + Device Info)
export async function getAllDeviceTokens() {
  const tokens: {
    fcmToken: string | null;
    deviceId: string | null;
    androidId: string | null;
    bundleId: string | null;
    isEmulator: boolean;
  } = {
    fcmToken: null,
    deviceId: null,
    androidId: null,
    bundleId: null,
    isEmulator: !Device.isDevice,
  };

  try {
    console.log('üîç ƒêang l·∫•y t·∫•t c·∫£ device tokens...');
    
    // 1. FCM Token
    tokens.fcmToken = await getFcmToken();

    // 2. Device ID
    tokens.deviceId = await getDeviceId();

    // 3. Android ID
    try {
      tokens.androidId = await Application.getAndroidId();
    } catch (error) {
      console.log('‚ùå Kh√¥ng th·ªÉ l·∫•y Android ID:', error);
    }

    // 4. Bundle ID
    tokens.bundleId = Application.applicationId;

    console.log('üì± === ALL DEVICE TOKENS ===');
    console.log(JSON.stringify(tokens, null, 2));
    console.log('üì± === END ALL TOKENS ===');

    return tokens;
  } catch (error) {
    console.log('üí• L·ªói khi l·∫•y t·∫•t c·∫£ tokens:', error);
    return tokens;
  }
}

// Gi·ªØ l·∫°i c√°c function c≈© ƒë·ªÉ t∆∞∆°ng th√≠ch
export async function registerForPushNotificationsAsync() {
  console.log('‚ö†Ô∏è registerForPushNotificationsAsync is deprecated, use getFcmToken instead');
  return await getFcmToken();
}

export async function getDeviceToken() {
  console.log('‚ö†Ô∏è getDeviceToken is deprecated, use getFcmToken instead');
  return await getFcmToken();
}

export async function logDeviceInfo() {
  console.log('üì± === DEVICE INFO ===');
  console.log('üîß isDevice:', Device.isDevice);
  console.log('üì± Platform:', Device.platformApiLevel);
  console.log('üì± Brand:', Device.brand);
  console.log('üì± Model:', Device.modelName);
  console.log('üì± OS Version:', Device.osVersion);
  console.log('üì± Device ID:', await getDeviceId());
  console.log('üì± Android ID:', await Application.getAndroidId());
  console.log('üì± Bundle ID:', Application.applicationId);
  console.log('üì± === END DEVICE INFO ===');
}

export async function getDeviceId(): Promise<string> {
  try {
    // S·ª≠ d·ª•ng Android ID cho Android
    if (Device.osName === 'Android') {
      return await Application.getAndroidId() || 'unknown';
    }
    // S·ª≠ d·ª•ng Installation ID cho iOS
    else if (Device.osName === 'iOS') {
      return Application.applicationId || 'unknown';
    }
    return 'unknown';
  } catch (error) {
    console.log('‚ùå Error getting device ID:', error);
    return 'error';
  }
}

export async function getDetailedDeviceInfo() {
  const deviceInfo = {
    isDevice: Device.isDevice,
    platform: Device.platformApiLevel,
    brand: Device.brand,
    model: Device.modelName,
    osVersion: Device.osVersion,
    osName: Device.osName,
    deviceId: await getDeviceId(),
    androidId: await Application.getAndroidId(),
    bundleId: Application.applicationId,
    appVersion: Application.nativeApplicationVersion,
    buildVersion: Application.nativeBuildVersion,
  };
  
  console.log('üì± === DETAILED DEVICE INFO ===');
  console.log(JSON.stringify(deviceInfo, null, 2));
  console.log('üì± === END DETAILED DEVICE INFO ===');
  
  return deviceInfo;
} 